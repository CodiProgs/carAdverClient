/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    mutation CreateCar(\n        $bodyType: String!\n        $brandId: Int!\n        $fuelType: String!\n        $images: String!\n        $mileage: Int!\n        $modelId: Int!\n        $name: String!\n        $price: Int!\n        $registration: String!\n        $transmission: String!\n        $userId: Int!\n    ){\n        createCar(\n            createCarInput: {\n                bodyType: $bodyType\n                brandId: $brandId\n                fuelType: $fuelType\n                images: $images\n                mileage: $mileage\n                modelId: $modelId\n                name: $name\n                price: $price\n                registration: $registration\n                transmission: $transmission\n                userId: $userId\n            }\n        ){\n            car{\n                id\n                images\n            }\n        }\n    }\n": types.CreateCarDocument,
    "\n    mutation CreateMake(\n        $name: String!\n        $image: String!\n    ){\n        createMake(\n            createMakeInput: {\n                name: $name\n                image: $image\n            }\n        ){\n            make{\n                name\n                image\n            }\n        }\n    }\n": types.CreateMakeDocument,
    "\n    mutation CreateModel(\n        $name: String!\n        $makeId: Int!\n    ){\n        createModel(\n            createModelInput: {\n                name: $name\n                makeId: $makeId\n            }\n        ){\n            model{\n                name\n                id\n                brand{\n                    id\n                    name\n                }\n            }\n            \n        }\n    }\n": types.CreateModelDocument,
    "\n    mutation LoginUser(\n        $email: String!\n        $password: String!\n    ){\n        login(\n            loginInput: {\n                email: $email\n                password: $password\n            }\n        ){\n            user{\n                id\n                name\n                surname\n                email\n                image\n                phone\n                location\n                type\n            }\n        }\n    }\n": types.LoginUserDocument,
    "\n    mutation LogoutUser {\n        logout\n    }\n": types.LogoutUserDocument,
    "\n    mutation RegisterUser(\n        $email: String!\n        $name: String!\n        $password: String!\n        $surname: String!\n        $image: String!\n        $type: String!\n    ){\n        register(\n            registerInput: {\n                email: $email\n                name: $name\n                password: $password\n                surname: $surname\n                image: $image\n                type: $type\n            }\n        ){\n            user {\n                id\n                name\n                email\n                surname\n                image\n                type\n            }\n        }\n    }\n": types.RegisterUserDocument,
    "\n    mutation UpdateUser(\n        $email: String!\n        $image: String!\n        $location: String\n        $name: String!\n        $phone: String\n        $surname: String!\n    ){\n        updateUser(\n            updateInput: {\n                email: $email\n                image: $image\n                location: $location\n                name: $name\n                phone: $phone\n                surname: $surname\n            }\n        ){\n            user {\n                email\n                image\n                location\n                name\n                phone\n                surname\n            }\n        }\n    }\n": types.UpdateUserDocument,
    "\n    mutation UpdateEmail(\n        $email: String!\n        $id: Int!\n    ){\n        updateEmail(\n            updateEmailInput: {\n                email: $email\n                id: $id\n            }\n        ){\n            user {\n                email\n            }\n        }\n    }\n": types.UpdateEmailDocument,
    "\n    mutation UpdatePassword(\n        $password: String!\n        $email: String!\n    ){\n        updatePassword(\n            updatePasswordInput: {\n                password: $password\n                email: $email\n            }\n        ){\n            user {\n                email\n            }\n        }\n    }\n": types.UpdatePasswordDocument,
    "\n    mutation UpdateType(\n        $email: String!\n        $type: String!\n    ){\n        updateType(\n            updateTypeInput: {\n                email: $email\n                type: $type\n            }\n        ){\n            user {\n                email\n                type\n            }\n        }\n    }\n": types.UpdateTypeDocument,
    "\n    query GetAllCars {\n        getAllCars {\n            id\n            name\n            price\n            images\n            model{\n                id\n                name\n            }\n            brand{\n                id\n                name\n            }\n        }\n    }\n": types.GetAllCarsDocument,
    "\n    query GetAllCarByMake($makeId: Float!) {\n        getAllCarByMake(makeId: $makeId) {\n            id\n            name\n            price\n            images\n            model{\n                id\n                name\n            }\n        }\n    }\n": types.GetAllCarByMakeDocument,
    "\n    query GetAllMakes {\n        getAllMakes {\n            name\n            image\n            id\n        }\n    }\n": types.GetAllMakesDocument,
    "\n    query GetCarById($id: Float!) {\n        getCarById(id: $id) {\n            name\n            bodyType\n            brand{\n                id\n                name\n            }\n            fuelType\n            images\n            mileage\n            model{\n                name\n            }\n            price\n            registration\n            transmission\n            user{\n                id\n                name\n                surname\n                location\n                createdAt\n                email\n                phone\n                type\n                image\n            }\n        }\n    }\n": types.GetCarByIdDocument,
    "\n    query GetModelsAll {\n        getModelsAll {\n            name\n            id\n            brand{\n                id\n                name\n            }\n        }\n    }\n": types.GetModelsAllDocument,
    "\n    query GetUserById($id: Float!) {\n        getUserById(id: $id) {\n            user{\n                createdAt\n                phone\n                location\n                name\n                surname\n                email\n                id\n                image\n                type\n                cars{\n                    id\n                    name\n                    images\n                    price\n                    model{\n                        name\n                    }\n                }\n            }\n            \n        }\n    }\n": types.GetUserByIdDocument,
    "\n    query GetUserByType (\n        $type: String!\n    ){\n        getUsersByType(\n            type: $type\n        ){\n            name\n            surname\n            id\n            image\n            email\n            createdAt\n            location\n            cars{\n                name\n                id\n            }\n        }\n    }\n": types.GetUserByTypeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateCar(\n        $bodyType: String!\n        $brandId: Int!\n        $fuelType: String!\n        $images: String!\n        $mileage: Int!\n        $modelId: Int!\n        $name: String!\n        $price: Int!\n        $registration: String!\n        $transmission: String!\n        $userId: Int!\n    ){\n        createCar(\n            createCarInput: {\n                bodyType: $bodyType\n                brandId: $brandId\n                fuelType: $fuelType\n                images: $images\n                mileage: $mileage\n                modelId: $modelId\n                name: $name\n                price: $price\n                registration: $registration\n                transmission: $transmission\n                userId: $userId\n            }\n        ){\n            car{\n                id\n                images\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation CreateCar(\n        $bodyType: String!\n        $brandId: Int!\n        $fuelType: String!\n        $images: String!\n        $mileage: Int!\n        $modelId: Int!\n        $name: String!\n        $price: Int!\n        $registration: String!\n        $transmission: String!\n        $userId: Int!\n    ){\n        createCar(\n            createCarInput: {\n                bodyType: $bodyType\n                brandId: $brandId\n                fuelType: $fuelType\n                images: $images\n                mileage: $mileage\n                modelId: $modelId\n                name: $name\n                price: $price\n                registration: $registration\n                transmission: $transmission\n                userId: $userId\n            }\n        ){\n            car{\n                id\n                images\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateMake(\n        $name: String!\n        $image: String!\n    ){\n        createMake(\n            createMakeInput: {\n                name: $name\n                image: $image\n            }\n        ){\n            make{\n                name\n                image\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation CreateMake(\n        $name: String!\n        $image: String!\n    ){\n        createMake(\n            createMakeInput: {\n                name: $name\n                image: $image\n            }\n        ){\n            make{\n                name\n                image\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateModel(\n        $name: String!\n        $makeId: Int!\n    ){\n        createModel(\n            createModelInput: {\n                name: $name\n                makeId: $makeId\n            }\n        ){\n            model{\n                name\n                id\n                brand{\n                    id\n                    name\n                }\n            }\n            \n        }\n    }\n"): (typeof documents)["\n    mutation CreateModel(\n        $name: String!\n        $makeId: Int!\n    ){\n        createModel(\n            createModelInput: {\n                name: $name\n                makeId: $makeId\n            }\n        ){\n            model{\n                name\n                id\n                brand{\n                    id\n                    name\n                }\n            }\n            \n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation LoginUser(\n        $email: String!\n        $password: String!\n    ){\n        login(\n            loginInput: {\n                email: $email\n                password: $password\n            }\n        ){\n            user{\n                id\n                name\n                surname\n                email\n                image\n                phone\n                location\n                type\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation LoginUser(\n        $email: String!\n        $password: String!\n    ){\n        login(\n            loginInput: {\n                email: $email\n                password: $password\n            }\n        ){\n            user{\n                id\n                name\n                surname\n                email\n                image\n                phone\n                location\n                type\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation LogoutUser {\n        logout\n    }\n"): (typeof documents)["\n    mutation LogoutUser {\n        logout\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RegisterUser(\n        $email: String!\n        $name: String!\n        $password: String!\n        $surname: String!\n        $image: String!\n        $type: String!\n    ){\n        register(\n            registerInput: {\n                email: $email\n                name: $name\n                password: $password\n                surname: $surname\n                image: $image\n                type: $type\n            }\n        ){\n            user {\n                id\n                name\n                email\n                surname\n                image\n                type\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation RegisterUser(\n        $email: String!\n        $name: String!\n        $password: String!\n        $surname: String!\n        $image: String!\n        $type: String!\n    ){\n        register(\n            registerInput: {\n                email: $email\n                name: $name\n                password: $password\n                surname: $surname\n                image: $image\n                type: $type\n            }\n        ){\n            user {\n                id\n                name\n                email\n                surname\n                image\n                type\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateUser(\n        $email: String!\n        $image: String!\n        $location: String\n        $name: String!\n        $phone: String\n        $surname: String!\n    ){\n        updateUser(\n            updateInput: {\n                email: $email\n                image: $image\n                location: $location\n                name: $name\n                phone: $phone\n                surname: $surname\n            }\n        ){\n            user {\n                email\n                image\n                location\n                name\n                phone\n                surname\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateUser(\n        $email: String!\n        $image: String!\n        $location: String\n        $name: String!\n        $phone: String\n        $surname: String!\n    ){\n        updateUser(\n            updateInput: {\n                email: $email\n                image: $image\n                location: $location\n                name: $name\n                phone: $phone\n                surname: $surname\n            }\n        ){\n            user {\n                email\n                image\n                location\n                name\n                phone\n                surname\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateEmail(\n        $email: String!\n        $id: Int!\n    ){\n        updateEmail(\n            updateEmailInput: {\n                email: $email\n                id: $id\n            }\n        ){\n            user {\n                email\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateEmail(\n        $email: String!\n        $id: Int!\n    ){\n        updateEmail(\n            updateEmailInput: {\n                email: $email\n                id: $id\n            }\n        ){\n            user {\n                email\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdatePassword(\n        $password: String!\n        $email: String!\n    ){\n        updatePassword(\n            updatePasswordInput: {\n                password: $password\n                email: $email\n            }\n        ){\n            user {\n                email\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdatePassword(\n        $password: String!\n        $email: String!\n    ){\n        updatePassword(\n            updatePasswordInput: {\n                password: $password\n                email: $email\n            }\n        ){\n            user {\n                email\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateType(\n        $email: String!\n        $type: String!\n    ){\n        updateType(\n            updateTypeInput: {\n                email: $email\n                type: $type\n            }\n        ){\n            user {\n                email\n                type\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateType(\n        $email: String!\n        $type: String!\n    ){\n        updateType(\n            updateTypeInput: {\n                email: $email\n                type: $type\n            }\n        ){\n            user {\n                email\n                type\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAllCars {\n        getAllCars {\n            id\n            name\n            price\n            images\n            model{\n                id\n                name\n            }\n            brand{\n                id\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAllCars {\n        getAllCars {\n            id\n            name\n            price\n            images\n            model{\n                id\n                name\n            }\n            brand{\n                id\n                name\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAllCarByMake($makeId: Float!) {\n        getAllCarByMake(makeId: $makeId) {\n            id\n            name\n            price\n            images\n            model{\n                id\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAllCarByMake($makeId: Float!) {\n        getAllCarByMake(makeId: $makeId) {\n            id\n            name\n            price\n            images\n            model{\n                id\n                name\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAllMakes {\n        getAllMakes {\n            name\n            image\n            id\n        }\n    }\n"): (typeof documents)["\n    query GetAllMakes {\n        getAllMakes {\n            name\n            image\n            id\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetCarById($id: Float!) {\n        getCarById(id: $id) {\n            name\n            bodyType\n            brand{\n                id\n                name\n            }\n            fuelType\n            images\n            mileage\n            model{\n                name\n            }\n            price\n            registration\n            transmission\n            user{\n                id\n                name\n                surname\n                location\n                createdAt\n                email\n                phone\n                type\n                image\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetCarById($id: Float!) {\n        getCarById(id: $id) {\n            name\n            bodyType\n            brand{\n                id\n                name\n            }\n            fuelType\n            images\n            mileage\n            model{\n                name\n            }\n            price\n            registration\n            transmission\n            user{\n                id\n                name\n                surname\n                location\n                createdAt\n                email\n                phone\n                type\n                image\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetModelsAll {\n        getModelsAll {\n            name\n            id\n            brand{\n                id\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetModelsAll {\n        getModelsAll {\n            name\n            id\n            brand{\n                id\n                name\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserById($id: Float!) {\n        getUserById(id: $id) {\n            user{\n                createdAt\n                phone\n                location\n                name\n                surname\n                email\n                id\n                image\n                type\n                cars{\n                    id\n                    name\n                    images\n                    price\n                    model{\n                        name\n                    }\n                }\n            }\n            \n        }\n    }\n"): (typeof documents)["\n    query GetUserById($id: Float!) {\n        getUserById(id: $id) {\n            user{\n                createdAt\n                phone\n                location\n                name\n                surname\n                email\n                id\n                image\n                type\n                cars{\n                    id\n                    name\n                    images\n                    price\n                    model{\n                        name\n                    }\n                }\n            }\n            \n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserByType (\n        $type: String!\n    ){\n        getUsersByType(\n            type: $type\n        ){\n            name\n            surname\n            id\n            image\n            email\n            createdAt\n            location\n            cars{\n                name\n                id\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetUserByType (\n        $type: String!\n    ){\n        getUsersByType(\n            type: $type\n        ){\n            name\n            surname\n            id\n            image\n            email\n            createdAt\n            location\n            cars{\n                name\n                id\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;